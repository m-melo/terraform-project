name: "Vprofile IAC"
# This will trigger "on":
on:
  push: # when a push appends
    branches: # in branches
      - main
      - stage
    paths:  # when files in these paths are changed
      - terraform/**

  pull_request: # when a PR appends
    branches: # in branches
      - main
    paths:  # when files in these paths are changed
      - terraform/**

env:
  # Credentials for deployment to AWS
  # These secrets are store in the repository secrets
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 (AWS bucket app) for the Terraform state
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  # Not mandatory but will be used a lot
  AWS_REGION: us-east-1
  EKS_CLUSTER: terraformProject # Same name as clusterName.default in variables.tf

jobs:
  terraform:
    name: "Apply terraform code changes"
    # This will run on github actions (that has lots of runners, aka, containers)
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    
    steps:
      - name: Checkout source code.
        uses: actions/checkout@v4 # https://github.com/marketplace/actions/checkout

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        # say nothing it will use latest
        # with:
        #   terraform_version: 1.6.3
      
      - name: Terraform init
        id: init # with id we can refer it in other steps (this is like a register in ansible)
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate
      
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1
